{"version":3,"file":"matroska-subtitles.module.js","sources":["../src/subtitle-parser-base.js","../src/subtitle-parser.js","../src/subtitle-stream.js"],"sourcesContent":["import { PassThrough } from 'readable-stream'\r\nimport { EbmlStreamDecoder, EbmlTagId } from 'ebml-stream'\r\nimport { inflateSync } from 'zlib'\r\n\r\nconst SSA_TYPES = new Set(['ssa', 'ass'])\r\nconst SSA_KEYS = ['readOrder', 'layer', 'style', 'name', 'marginL', 'marginR', 'marginV', 'effect', 'text']\r\n\r\nfunction getChild (chunk, tag) {\r\n  return chunk?.Children.find(({ id }) => id === tag)\r\n}\r\nfunction getData (chunk, tag) {\r\n  return getChild(chunk, tag)?.data\r\n}\r\n\r\nexport class SubtitleParserBase extends PassThrough {\r\n  constructor () {\r\n    super()\r\n\r\n    this.subtitleTracks = new Map()\r\n    this.timecodeScale = 1\r\n\r\n    this._currentClusterTimecode = null\r\n\r\n    this.decoder = new EbmlStreamDecoder({\r\n      bufferTagIds: [\r\n        EbmlTagId.TimecodeScale,\r\n        EbmlTagId.Tracks,\r\n        EbmlTagId.BlockGroup,\r\n        EbmlTagId.AttachedFile,\r\n        EbmlTagId.Chapters,\r\n        EbmlTagId.Duration\r\n      ]\r\n    })\r\n\r\n    const tagMap = {\r\n      // Segment Information\r\n      [EbmlTagId.TimecodeScale]: ({ data }) => {\r\n        this.timecodeScale = data / 1000000\r\n      },\r\n      // Assumption: This is a Cluster `Timecode`\r\n      [EbmlTagId.Timecode]: ({ data }) => {\r\n        this._currentClusterTimecode = data\r\n      },\r\n      // Parse attached files, mainly to allow extracting subtitle font files.\r\n      [EbmlTagId.AttachedFile]: chunk => {\r\n        this.emit('file', {\r\n          filename: getData(chunk, EbmlTagId.FileName),\r\n          mimetype: getData(chunk, EbmlTagId.FileMimeType),\r\n          data: getData(chunk, EbmlTagId.FileData)\r\n        })\r\n      },\r\n      // Duration for chapters which don't specify an end position\r\n      [EbmlTagId.Duration]: ({ data }) => {\r\n        this.duration = data\r\n      },\r\n      [EbmlTagId.Tracks]: this.handleTracks.bind(this),\r\n      [EbmlTagId.BlockGroup]: this.handleBlockGroup.bind(this),\r\n      [EbmlTagId.Chapters]: this.handleChapters.bind(this)\r\n    }\r\n    this.decoder.on('data', chunk => {\r\n      tagMap[chunk.id]?.(chunk)\r\n    })\r\n  }\r\n\r\n  handleTracks (chunk) {\r\n    for (const entry of chunk.Children.filter(c => c.id === EbmlTagId.TrackEntry)) {\r\n      // Skip non subtitle tracks\r\n      if (getData(entry, EbmlTagId.TrackType) !== 0x11) continue\r\n\r\n      const codecID = getData(entry, EbmlTagId.CodecID) || ''\r\n      if (codecID.startsWith('S_TEXT')) {\r\n        const track = {\r\n          number: getData(entry, EbmlTagId.TrackNumber),\r\n          language: getData(entry, EbmlTagId.Language),\r\n          type: codecID.substring(7).toLowerCase()\r\n        }\r\n\r\n        const name = getData(entry, EbmlTagId.Name)\r\n        if (name) track.name = name\r\n\r\n        const header = getData(entry, EbmlTagId.CodecPrivate)\r\n        if (header) track.header = header.toString()\r\n\r\n        // TODO: Assume zlib deflate compression\r\n        const compressed = entry.Children.find(c =>\r\n          c.id === EbmlTagId.ContentEncodings &&\r\n          c.Children.find(cc =>\r\n            cc.id === EbmlTagId.ContentEncoding &&\r\n            getChild(cc, EbmlTagId.ContentCompression)\r\n          )\r\n        )\r\n\r\n        if (compressed) track._compressed = true\r\n\r\n        this.subtitleTracks.set(track.number, track)\r\n      }\r\n    }\r\n\r\n    this.emit('tracks', [...this.subtitleTracks.values()])\r\n  }\r\n\r\n  handleBlockGroup (chunk) {\r\n    const block = getChild(chunk, EbmlTagId.Block)\r\n\r\n    if (block && this.subtitleTracks.has(block.track)) {\r\n      const blockDuration = getData(chunk, EbmlTagId.BlockDuration)\r\n      const track = this.subtitleTracks.get(block.track)\r\n\r\n      const payload = track._compressed\r\n        ? inflateSync(Buffer.from(block.payload))\r\n        : block.payload\r\n\r\n      const subtitle = {\r\n        text: payload.toString('utf8'),\r\n        time: (block.value + this._currentClusterTimecode) * this.timecodeScale,\r\n        duration: blockDuration * this.timecodeScale\r\n      }\r\n\r\n      if (SSA_TYPES.has(track.type)) {\r\n        // extract SSA/ASS keys\r\n        const values = subtitle.text.split(',')\r\n\r\n        // ignore read-order, and skip layer if ssa\r\n        for (let i = track.type === 'ssa' ? 2 : 1; i < 8; i++) {\r\n          subtitle[SSA_KEYS[i]] = values[i]\r\n        }\r\n\r\n        subtitle.text = values.slice(8).join(',')\r\n      }\r\n\r\n      this.emit('subtitle', subtitle, block.track)\r\n    }\r\n  }\r\n\r\n  handleChapters ({ Children }) {\r\n    const editions = Children.filter(c => c.id === EbmlTagId.EditionEntry)\r\n    // https://www.matroska.org/technical/chapters.html#default-edition\r\n    // finds first default edition, or first entry\r\n    const defaultEdition = editions.find(c => {\r\n      return c.Children.some(cc => {\r\n        return cc.id === EbmlTagId.EditionFlagDefault && Boolean(cc.data)\r\n      })\r\n    }) || editions[0]\r\n\r\n    // exclude hidden atoms\r\n    const atoms = defaultEdition.Children.filter(c => c.id === EbmlTagId.ChapterAtom && !getData(c, EbmlTagId.ChapterFlagHidden))\r\n    const chapters = []\r\n    for (let i = atoms.length - 1; i >= 0; --i) {\r\n      const start = getData(atoms[i], EbmlTagId.ChapterTimeStart) / this.timecodeScale / 1000000\r\n      const end = (getData(atoms[i], EbmlTagId.ChapterTimeEnd) / this.timecodeScale / 1000000) || chapters[i + 1]?.start || this.duration\r\n      const disp = getChild(atoms[i], EbmlTagId.ChapterDisplay)\r\n\r\n      chapters[i] = {\r\n        start,\r\n        end,\r\n        text: getData(disp, EbmlTagId.ChapString),\r\n        language: getData(disp, EbmlTagId.ChapLanguage)\r\n      }\r\n    }\r\n    this.emit('chapters', chapters)\r\n  }\r\n}\r\n","import { EbmlTagId } from 'ebml-stream'\r\nimport { SubtitleParserBase } from './subtitle-parser-base'\r\n\r\nexport class SubtitleParser extends SubtitleParserBase {\r\n  constructor () {\r\n    super()\r\n\r\n    this.decoder.on('data', (chunk) => {\r\n      if (chunk.id === EbmlTagId.Tracks) {\r\n        // stop decoding if no subtitle tracks are present\r\n        if (this.subtitleTracks.size === 0) this.end()\r\n      }\r\n    })\r\n  }\r\n\r\n  _write (chunk, _, callback) {\r\n    this.decoder.write(chunk)\r\n    callback(null, chunk)\r\n  }\r\n}\r\n","import { SubtitleParserBase } from './subtitle-parser-base'\r\nimport { EbmlTagId } from 'ebml-stream'\r\n\r\nexport class SubtitleStream extends SubtitleParserBase {\r\n  constructor (prevInstance) {\r\n    super()\r\n\r\n    if (prevInstance instanceof SubtitleParserBase) {\r\n      prevInstance.once('drain', () => prevInstance.end())\r\n\r\n      // copy previous metadata\r\n      this.subtitleTracks = prevInstance.subtitleTracks\r\n      this.timecodeScale = prevInstance.timecodeScale\r\n\r\n      // may not be at ebml tag offset\r\n      this.unstable = true\r\n    }\r\n    this.on('data', this._ondata.bind(this))\r\n  }\r\n\r\n  // passthrough stream: data is intercepted but not transformed\r\n  _ondata (chunk) {\r\n    if (this.unstable) {\r\n      // the ebml decoder expects to see a tag, so we won't use it until we find a cluster\r\n      for (let i = 0; i < chunk.length - 12; i++) {\r\n        // cluster id 0x1F43B675\r\n        // https://matroska.org/technical/elements.html#LevelCluster\r\n        if (chunk[i] === 0x1f && chunk[i + 1] === 0x43 && chunk[i + 2] === 0xb6 && chunk[i + 3] === 0x75) {\r\n          // length of cluster size tag\r\n          const len = 8 - Math.floor(Math.log2(chunk[i + 4]))\r\n          // first tag in cluster is a valid EbmlTag\r\n          if (EbmlTagId[chunk[i + 4 + len]]) {\r\n            // okay this is probably a cluster\r\n            this.unstable = false\r\n            this.decoderWrite(chunk.slice(i))\r\n            return\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.decoderWrite(chunk)\r\n    }\r\n  }\r\n\r\n  decoderWrite (chunk) {\r\n    // passthrough stream should allow chained streams to continue on error\r\n    try {\r\n      this.decoder.write(chunk)\r\n    } catch (err) {\r\n      console.warn('[matroska-subtitles] EBML stream decoding error', err)\r\n    }\r\n  }\r\n}\r\n"],"names":["SSA_TYPES","Set","SSA_KEYS","getChild","chunk","tag","Children","find","id","getData","data","SubtitleParserBase","PassThrough","constructor","subtitleTracks","Map","timecodeScale","_currentClusterTimecode","decoder","EbmlStreamDecoder","bufferTagIds","EbmlTagId","TimecodeScale","Tracks","BlockGroup","AttachedFile","Chapters","Duration","tagMap","Timecode","emit","filename","FileName","mimetype","FileMimeType","FileData","duration","handleTracks","bind","handleBlockGroup","handleChapters","on","entry","filter","c","TrackEntry","TrackType","codecID","CodecID","startsWith","track","number","TrackNumber","language","Language","type","substring","toLowerCase","name","Name","header","CodecPrivate","toString","compressed","ContentEncodings","cc","ContentEncoding","ContentCompression","_compressed","set","values","block","Block","has","blockDuration","BlockDuration","get","payload","inflateSync","Buffer","from","subtitle","text","time","value","split","i","slice","join","editions","EditionEntry","defaultEdition","some","EditionFlagDefault","Boolean","atoms","ChapterAtom","ChapterFlagHidden","chapters","length","start","ChapterTimeStart","end","ChapterTimeEnd","disp","ChapterDisplay","ChapString","ChapLanguage","SubtitleParser","size","_write","_","callback","write","SubtitleStream","prevInstance","once","unstable","_ondata","len","Math","floor","log2","decoderWrite","err","console","warn"],"mappings":"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"}